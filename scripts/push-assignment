#! /usr/bin/env python3

# --------------------------------------------------------------------
import sys, os, glob, re, base64, json, configparser as cp
import datetime as dt, urllib as ul, urllib.parse, urllib.request

# --------------------------------------------------------------------
USAGE = 'Usage: %s [URL] [FILE.ini]'

# --------------------------------------------------------------------
class Object(object):
    def __init__(self, **kw):
        super().__init__()
        self.__dict__.update(kw)

# --------------------------------------------------------------------
class Error(Exception):
    pass

# --------------------------------------------------------------------
def validate_code(code):
    if re.match(r'^[a-zA-Z0-9]+$', code) is None:
        raise Error('invalid code: %s' % (code,))
    return code

# --------------------------------------------------------------------
def validate_subcode(subcode):
    if re.match(r'^[a-zA-Z0-9]+$', subcode) is None:
        raise Error('invalid sub-code: %s' % (subcode,))
    return subcode

# --------------------------------------------------------------------
def validate_promo(promo):
    if re.match(r'^[0-9]+$', promo) is None or int(promo) < 1794:
        raise Error('invalid promo: %s' % (promo,))
    return int(promo)

# --------------------------------------------------------------------
def validate_forno(forno):
    try:
        return [int(x) for x in forno.split()]
    except ValueError:
        raise Error('invalid seq-no list: %s' % (forno,))

# --------------------------------------------------------------------
def validate_date(date):
    return dt.datetime.strptime(date, '%Y-%m-%d').date()

# --------------------------------------------------------------------
TRUE  = [ 'true', '1', 't', 'y', 'yes']
FALSE = ['false', '0', 'f', 'n', 'no']
BOOL  = { **{ x: True for x in TRUE }, **{ x: False for x in FALSE } }

def validate_bool(x):
    value = BOOL.get(x.lower(), None)
    if x is None:
        raise Error('invalid flag: %s' % (x,))
    return value

# --------------------------------------------------------------------
def validate_resources(resources, base):
    if not isinstance(resources, list):
        resources = resources.split()

    resources = [os.path.join(base, x) for x in resources]
    resources = [x for r in resources for x in glob.glob(r)]
    resources = [(os.path.relpath(x, base), read_file(x)) for x in resources]

    return resources

# --------------------------------------------------------------------
RE_RANGE = r'^(?P<start>\d+)?(?P<mid>-(?P<end>\d+)?)?$'

def validate_required(reqs):
    try:
        reqs, aout = reqs.split(), dict()
        for req in reqs:
            if ':' not in req:
                raise ValueError
            fname, indices = req.rsplit(':', 1)
            for idx in indices.split(','):
                mtc = re.match(RE_RANGE, idx)
                if not idx or mtc is None:
                    raise ValueError
                dtc = dict()
                if mtc.group('start') is not None:
                    dtc['start'] = int(mtc.group('start'))
                if mtc.group('mid') is None:
                    if 'start' in dtc:
                        dtc['end'] = dtc['start']
                elif mtc.group('end') is not None:
                    dtc['end'] = int(mtc.group('end'))
                aout.setdefault(fname, []).append(dtc)
        return aout

    except ValueError:
        raise Error('invalid req-files list')

# --------------------------------------------------------------------
def validate_merge(merge):
    try:
        merge, aout = merge.split(), dict()
        for m in merge:
            if ':' not in m:
                raise ValueError
            from_, to_ = m.split(':', 1)
            aout.setdefault(from_, set()).add(to_)
        aout = { k: list(sorted(v)) for k, v in aout.items() }
        return aout

    except ValueError:
        raise Error('invalid merge list')

# --------------------------------------------------------------------
def validate_map(maps):
    try:
        maps, aout = maps.split(), []
        for map in maps:
            if ':' not in map:
                raise ValueError
            map = map.split(':', 2)
            aout.append(dict(pattern = map[0], destination = map[1]))
        return aout

    except ValueError:
        raise Error('invalid map-files list')

# --------------------------------------------------------------------
def encode_resource(r):
    return dict(
        name     = r[0],
        contents = base64.b64encode(r[1]).decode('ascii'))

# --------------------------------------------------------------------
def encode_resources(rs):
    return [encode_resource(r) for r in rs]

# --------------------------------------------------------------------
def read_file(path, charset = None):
    mode = 'rb' if charset is None else 'r'
    try:
        with open(path, mode, encoding = charset) as stream:
            return stream.read()
    except (IOError, UnicodeDecodeError) as e:
        raise Error("error while reading file `%s': %s" % (path, e), e)

# --------------------------------------------------------------------
ASECTION = 'assignment'
CSECTION = 'auto-correct'

def read_options(filename):
    config = cp.ConfigParser()
    config.read_string(read_file(filename, 'utf-8'))

    options = Object()
    try:
        options.code        = config.get(ASECTION, 'code'     )
        options.subcode     = config.get(ASECTION, 'subcode'  )
        options.promo       = config.get(ASECTION, 'promo'    )
        options.start       = config.get(ASECTION, 'start'    , fallback = None)
        options.end         = config.get(ASECTION, 'end'      , fallback = None)
        options.lateok      = config.get(ASECTION, 'lateok'   , fallback = str(False))
        options.markdown    = config.get(ASECTION, 'markdown' )
        options.resources   = config.get(ASECTION, 'resources')
        options.required    = config.get(ASECTION, 'required' , fallback = '')
        options.merge       = config.get(ASECTION, 'merge'    , fallback = '')
        options.map         = config.get(ASECTION, 'map'      , fallback = '')
        options.autocorrect = None

        if config.has_section(CSECTION):
            options.autocorrect = Object()
            options.autocorrect.dir    = config.get(CSECTION, 'dir'   )
            options.autocorrect.implem = config.get(CSECTION, 'implem', fallback = None)
            options.autocorrect.forno  = config.get(CSECTION, 'forno' )
            options.autocorrect.extra  = config.get(CSECTION, 'extra' )

    except cp.Error as e:
        raise Error('cannot read INI file (%s): %s' % (filename, e), e)

    return options

# --------------------------------------------------------------------
def _main():
    if len(sys.argv)-1 != 3:
        print(USAGE % (sys.argv[0],), file = sys.stderr)
        exit(1)

    URL, secret, options = sys.argv[1:]
    URL = '%s/%s/' % (URL, 'agns/%(code)s/%(subcode)s/%(promo)s')

    try:
        options = read_options(options)
        base    = os.path.dirname(options.markdown)

        options.code      = validate_code     (options.code)
        options.subcode   = validate_subcode  (options.subcode)
        options.promo     = validate_promo    (options.promo)
        options.lateok    = validate_bool     (options.lateok)
        options.markdown  = read_file         (options.markdown, charset = 'utf-8')
        options.required  = validate_required (options.required)
        options.map       = validate_map      (options.map)
        options.resources = validate_resources(options.resources, base)
        acorrect          = options.autocorrect

        if options.merge:
            options.merge = validate_merge(options.merge)

        if options.start is not None:
            options.start = validate_date(options.start)

        if options.end   is not None:
            options.end   = validate_date(options.end  )

        if acorrect is not None:
            acorrect.forno = validate_forno(acorrect.forno)
            acorrect.extra = validate_resources \
                (acorrect.extra, os.path.join(base, acorrect.dir))

        dta = dict(
            code      = options.code,
            subcode   = options.subcode,
            promo     = options.promo,
            start     = None,
            end       = None,
            lateok    = options.lateok,
            contents  = options.markdown,
            resources = encode_resources(options.resources),
        )

        if options.start:
            dta['start'] = options.start.strftime('%Y-%m-%d')

        if options.end:
            dta['end'] = options.end.strftime('%Y-%m-%d')

        if options.required:
            dta['required'] = options.required

        if options.map:
            dta['map'] = options.map

        if options.merge:
            dta['merge'] = options.merge

        if acorrect is not None:
            dta['autocorrect'] = dict(
                forno = acorrect.forno,
                extra = encode_resources(acorrect.extra),
            )

        url = URL % (dict(code    = ul.parse.quote(options.code),
                          subcode = ul.parse.quote(options.subcode),
                          promo   = ul.parse.quote(str(options.promo))))

        dta = json.dumps(dta).encode('utf-8')

        hdr = {
            'Content-Type': 'application/json; charset=utf-8',
            'X-Secret': secret,
        }
        req = ul.request.Request(url, data = dta, headers = hdr, method = 'PUT')

        try:
            with ul.request.urlopen(req) as cx:
                response = cx.read()

        except (ul.error.HTTPError, ul.error.URLError) as e:
            raise Error('cannot upload assignment: %s' % (e,), e)

        sys.stderr.write(response.decode('ascii', errors='surrogateescape'))

    except Error as e:
        print('error: %s' % (e,), file = sys.stderr)
        exit(1)

# --------------------------------------------------------------------
if __name__ == '__main__':
    _main()
